stages:
  - build
  - deploy-dev
  - deploy-prod

build-frontend:
  image: node:alpine
  stage: build
  script:
    - cd frontend
    - npm install
    - CI=false npm run build

# Need some way to check python compiles
build-backend:
  stage: build
  script:
    - cd backend
    - echo "add build check and formatting"

deploy-dev:
  image: docker/compose:debian-1.29.2
  stage: deploy-dev
  script:
    - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "$ID_RSA_DEV" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$KNOWN_HOSTS_DEV" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # Docker Compose
    - COMPOSE_DOCKER_CLI_BUILD=0 DOCKER_HOST="ssh://$SERVER_USER_DEV@$SERVER_IP_DEV" DEV_MINT_ACCOUNT=$DEV_MINT_ACCOUNT DEV_SOLANA_CLIENT=$DEV_SOLANA_CLIENT DEV_RESERVE_ACCOUNT_ADDRESS=$DEV_RESERVE_ACCOUNT_ADDRESS DEV_TOKEN_OWNER=$DEV_TOKEN_OWNER DEV_SECRET_KEY=${DEV_SECRET_KEY} DEV_PAYSTACK_SECRET_KEY=${DEV_PAYSTACK_SECRET_KEY} DEV_DATABASE_URL=${DEV_DATABASE_URL} REDIS_PASS=${REDIS_PASS} DEV_GMAIL_PASSWORD=${DEV_GMAIL_PASSWORD} docker-compose up --remove-orphans -d --build
    # Remove old images
    - yes y | COMPOSE_DOCKER_CLI_BUILD=0 DOCKER_HOST="ssh://$SERVER_USER_DEV@$SERVER_IP_DEV" docker system prune --all || true
    # Ensure all containers running
    - INFO=$(COMPOSE_DOCKER_CLI_BUILD=0 DOCKER_HOST="ssh://$SERVER_USER_DEV@$SERVER_IP_DEV" docker ps)
    - if [[ $(echo $INFO | grep stablecoin_frontend_1 | wc -l) -ne 1 ]]; then echo "frontend container not running" && exit 1; else echo "frontend container check successful"; fi
    - if [[ $(echo $INFO | grep stablecoin_backend_1 | wc -l) -ne 1 ]]; then echo "backend container not running" && exit 1; else echo "backend container check successful"; fi
    - if [[ $(echo $INFO | grep stablecoin_db_1 | wc -l) -ne 1 ]]; then echo "db container not running" && exit 1; else echo "db container check successful"; fi
  only:
    - master

deploy-prod:
  image: docker/compose:debian-1.29.2
  stage: deploy-prod
  script:
    - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "$ID_RSA" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # Docker Compose
    - COMPOSE_DOCKER_CLI_BUILD=0 DOCKER_HOST="ssh://$SERVER_USER@$SERVER_IP" PROD_MINT_ACCOUNT=$PROD_MINT_ACCOUNT PROD_SOLANA_CLIENT=$PROD_SOLANA_CLIENT PROD_RESERVE_ACCOUNT_ADDRESS=$PROD_RESERVE_ACCOUNT_ADDRESS PROD_TOKEN_OWNER=$PROD_TOKEN_OWNER PROD_SECRET_KEY=${PROD_SECRET_KEY} PROD_PAYSTACK_SECRET_KEY=${PROD_PAYSTACK_SECRET_KEY} PROD_DATABASE_URL=${PROD_DATABASE_URL} REDIS_PASS=${REDIS_PASS} PROD_GMAIL_PASSWORD=${PROD_GMAIL_PASSWORD} docker-compose up --remove-orphans -d --build
    # Remove old images
    - yes y | COMPOSE_DOCKER_CLI_BUILD=0 DOCKER_HOST="ssh://$SERVER_USER@$SERVER_IP" docker system prune --all || true
    # Ensure all containers running
    - INFO=$(COMPOSE_DOCKER_CLI_BUILD=0 DOCKER_HOST="ssh://$SERVER_USER@$SERVER_IP" docker ps)
    - if [[ $(echo $INFO | grep stablecoin_frontend_1 | wc -l) -ne 1 ]]; then echo "frontend container not running" && exit 1; else echo "frontend container check successful"; fi
    - if [[ $(echo $INFO | grep stablecoin_backend_1 | wc -l) -ne 1 ]]; then echo "backend container not running" && exit 1; else echo "backend container check successful"; fi
    - if [[ $(echo $INFO | grep stablecoin_db_1 | wc -l) -ne 1 ]]; then echo "db container not running" && exit 1; else echo "db container check successful"; fi
  only:
    - master
  when: manual
